# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-09-08 23:25
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('widget_def', '0069_auto_20160831_1239'),
    ]

    operations = [
        migrations.AlterField(
            model_name='category',
            name='category_aspect',
            field=models.IntegerField(help_text=b'A numeric value associated with the category, the interpretation may vary between front end implementations. Possible uses include relative size of widgets of this category.'),
        ),
        migrations.AlterField(
            model_name='category',
            name='name',
            field=models.CharField(help_text=b'The category name, as it appears in API.', max_length=60, unique=True),
        ),
        migrations.AlterField(
            model_name='category',
            name='sort_order',
            field=models.IntegerField(help_text=b'Widgets are sorted by category according to the value of this field.', unique=True),
        ),
        migrations.AlterField(
            model_name='parametisation',
            name='name',
            field=models.CharField(help_text=b'A longer descriptive name.', max_length=128, unique=True),
        ),
        migrations.AlterField(
            model_name='parametisation',
            name='url',
            field=models.SlugField(help_text=b'A short symbolic name used by export commands', unique=True),
        ),
        migrations.AlterField(
            model_name='parametisationkey',
            name='key',
            field=models.CharField(help_text=b'The parametised key', max_length=120),
        ),
        migrations.AlterField(
            model_name='parametisationkey',
            name='param',
            field=models.ForeignKey(help_text=b'The Parametisation', on_delete=django.db.models.deletion.CASCADE, to='widget_def.Parametisation'),
        ),
        migrations.AlterField(
            model_name='parametisationvalue',
            name='param',
            field=models.ForeignKey(help_text=b'The Parametisation', on_delete=django.db.models.deletion.CASCADE, to='widget_def.Parametisation'),
        ),
        migrations.AlterField(
            model_name='parametisationvalue',
            name='views',
            field=models.ManyToManyField(help_text=b'The set of views whose properties match this ParametisationValue', to='widget_def.WidgetView'),
        ),
        migrations.AlterField(
            model_name='subcategory',
            name='category',
            field=models.ForeignKey(help_text=b'The parent category', on_delete=django.db.models.deletion.CASCADE, to='widget_def.Category'),
        ),
        migrations.AlterField(
            model_name='subcategory',
            name='name',
            field=models.CharField(help_text=b'The subcategory name, as it appears in the API', max_length=60),
        ),
        migrations.AlterField(
            model_name='subcategory',
            name='sort_order',
            field=models.IntegerField(help_text=b'Widgets are sorted by subcategory (after sorting by category) according to the value of this field.'),
        ),
        migrations.AlterField(
            model_name='viewproperty',
            name='boolval',
            field=models.NullBooleanField(help_text=b'The value (for boolean properties)'),
        ),
        migrations.AlterField(
            model_name='viewproperty',
            name='decval',
            field=models.DecimalField(blank=True, decimal_places=4, help_text=b'The value (for decimal properties)', max_digits=14, null=True),
        ),
        migrations.AlterField(
            model_name='viewproperty',
            name='intval',
            field=models.IntegerField(blank=True, help_text=b'The value (for integer properties)', null=True),
        ),
        migrations.AlterField(
            model_name='viewproperty',
            name='key',
            field=models.CharField(help_text=b'The key for this property', max_length=120),
        ),
        migrations.AlterField(
            model_name='viewproperty',
            name='property_type',
            field=models.SmallIntegerField(choices=[(0, b'integer'), (1, b'string'), (2, b'boolean'), (3, b'decimal')], help_text=b'The datatype of this property'),
        ),
        migrations.AlterField(
            model_name='viewproperty',
            name='strval',
            field=models.TextField(blank=True, help_text=b'The value (for string properties)', null=True),
        ),
        migrations.AlterField(
            model_name='viewproperty',
            name='view',
            field=models.ForeignKey(help_text=b'The view this property belongs to', on_delete=django.db.models.deletion.CASCADE, to='widget_def.WidgetView'),
        ),
        migrations.AlterField(
            model_name='viewtype',
            name='name',
            field=models.CharField(help_text=b'The name of the view type, as it appears in the API', max_length=120, unique=True),
        ),
        migrations.AlterField(
            model_name='viewtype',
            name='show_children',
            field=models.BooleanField(default=False, help_text=b'If true views of this type should show links to their child views'),
        ),
        migrations.AlterField(
            model_name='viewtype',
            name='show_siblings',
            field=models.BooleanField(default=False, help_text=b'If true views of this type should show links to their sibling views'),
        ),
        migrations.AlterField(
            model_name='widgetview',
            name='external_url',
            field=models.URLField(blank=True, help_text=b'If not null, then this Widget View is not hosted locally, but is merely a placeholder for a view hosted by another Openboard instance, and this is the API root URL for that external Openboard instance.', null=True),
        ),
        migrations.AlterField(
            model_name='widgetview',
            name='geo_window',
            field=models.ForeignKey(blank=True, help_text=b'A geospatial window - a rectangle that defines the initial viewing area for geodatasets under this WidgetView.  A WidgetView with a non-null geowindow may contain GeoDatasets as well as widgets.', null=True, on_delete=django.db.models.deletion.CASCADE, to='widget_def.GeoWindow'),
        ),
        migrations.AlterField(
            model_name='widgetview',
            name='label',
            field=models.SlugField(help_text=b'The symbolic label for the view, as used in the API.', unique=True),
        ),
        migrations.AlterField(
            model_name='widgetview',
            name='name',
            field=models.CharField(help_text=b'The display name for the view, as displayed in links to the view, and in the view itself', max_length=120),
        ),
        migrations.AlterField(
            model_name='widgetview',
            name='parent',
            field=models.ForeignKey(blank=True, help_text=b'The parent WidgetView. If null, this WidgetView is a root node in a view hierarchy.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='widget_def.WidgetView'),
        ),
        migrations.AlterField(
            model_name='widgetview',
            name='requires_authentication',
            field=models.BooleanField(default=False, help_text=b'If true then authentication is required to access this view. Note that authentication is not supported acroess externally hosted WidgetViews.'),
        ),
        migrations.AlterField(
            model_name='widgetview',
            name='sort_order',
            field=models.IntegerField(help_text=b'WidgetViews are sorted by parent, then by this field'),
        ),
        migrations.AlterField(
            model_name='widgetview',
            name='view_type',
            field=models.ForeignKey(help_text=b'The type of WidgetView', on_delete=django.db.models.deletion.CASCADE, to='widget_def.ViewType'),
        ),
    ]
