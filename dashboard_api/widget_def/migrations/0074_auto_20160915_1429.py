# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-09-15 04:29
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('widget_def', '0073_auto_20160913_1416'),
    ]

    operations = [
        migrations.AlterField(
            model_name='statistic',
            name='editable',
            field=models.BooleanField(default=True, help_text=b"If true, users with the widget's 'edit_permission' can manually edit the data for this statistic. If false, only users with the widget's 'edit_all_permission' can do so."),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='footer',
            field=models.BooleanField(default=False, help_text=b'If true, the statistic is to be displayed as a "footer" across the bottom of the tile. Cannot be true for display list statistics, and can only be true for at most one statistic per tile.'),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='hyperlinkable',
            field=models.BooleanField(default=False, help_text=b'For display-list statistics and statistics with rotates=True. If true, an external URL can be optionally supplied for each list item.'),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='icon_library',
            field=models.ForeignKey(blank=True, help_text=b'The icon library associated with the statistic. If set, an icon from the configured library will be supplied for the statistic with the widget data. The icon must be set explicitly by the data loader or uploader.', null=True, on_delete=django.db.models.deletion.CASCADE, to='widget_def.IconLibrary'),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='name',
            field=models.CharField(blank=True, help_text=b'A pretty descriptive name for the statistic - may be blank if the statistic is be unlabeled', max_length=80),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='name_as_label',
            field=models.BooleanField(default=True, help_text=b'If true, the name field is used as the display name for the statistic. If false, a display name for the statistic is supplied dynamically with the widget data.', verbose_name=b'display_name'),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='num_precision',
            field=models.SmallIntegerField(blank=True, help_text=b'The number of decimal places per data item. For numeric and numeric_kv_list statistics.', null=True),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='numbered_list',
            field=models.BooleanField(default=False, help_text=b'For display-list statistics only. If true, list items should be displayed numbered.'),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='rotates',
            field=models.BooleanField(default=False, help_text=b'For display list statistics, rotates=True means that only as many list items as can be displayed at once should be displayed, but the items displayed should be gradually rotated through the full set of list items supplied. For non-display-list statistics, rotates=True means that a list of data items will be supplied (instead of single data-item), but only one will be displayed at a time. The displayed item should gradually rotate through the full set supplied.'),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='sort_order',
            field=models.IntegerField(help_text=b'How the statistic is sorted within the tile.'),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='stat_type',
            field=models.SmallIntegerField(choices=[(1, b'string'), (8, b'long_string'), (2, b'numeric'), (3, b'string_kv_list'), (4, b'numeric_kv_list'), (5, b'string_list'), (9, b'long_string_list'), (6, b'am_pm'), (7, b'event_list'), (10, b'hierarchical_event_list'), (11, b'null')], help_text=b'The statistic type'),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='tile',
            field=models.ForeignKey(help_text=b'The widget tile this statistic appears in', on_delete=django.db.models.deletion.CASCADE, to='widget_def.TileDefinition'),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='traffic_light_automation',
            field=models.ForeignKey(blank=True, help_text=b"The traffic light automation associated with the statistic. If set, a traffic light value from the configured scale will be supplied for the statistic with the widget data. The traffic light value is determined automatically from the statistic value - traffic light automation can therefore not be set for 'null' statistics. (Note traffic_light_scale and traffic_light_automation cannot both be set for a statistic.)", null=True, on_delete=django.db.models.deletion.CASCADE, to='widget_def.TrafficLightAutomation'),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='traffic_light_scale',
            field=models.ForeignKey(blank=True, help_text=b'The traffic light scale associated with the statistic. If set, a traffic light value from the configured scale will be supplied for the statistic with the widget data. The traffic light value must be set explicitly by the data loader or uploader. (Note traffic_light_scale and traffic_light_automation cannot both be set for a statistic.)', null=True, on_delete=django.db.models.deletion.CASCADE, to='widget_def.TrafficLightScale'),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='trend',
            field=models.BooleanField(default=False, help_text=b"If true, the statistic is be displayed with a trend arrow that can indicate 'trending upwards', 'trending downwards', or 'holding steady'. The value of the trend arrow for the statistic is supplied with the widget data."),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='unit_prefix',
            field=models.CharField(blank=True, help_text=b"A prefix for the statistic.  e.g. '$': display 15 as '$15'.", max_length=10, null=True),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='unit_si_prefix_rounding',
            field=models.IntegerField(default=0, help_text=b'For numeric and numeric_kv_list statistics only. \n            If specified, the data item (with precision as specified) should be rounded by the front-end to the indicated number of significant digits, \n            and an SI unit prefix will be displayed between the number and any defined unit suffix. \n\n                Eg 1. Precision=0, si_prefix_rounding=2\n                1 -> 1,    234 -> 230,   5328 -> 5.3k,   45236457 -> 45M\n\n                Eg 2. Precision=2, si_prefix_rounding=4\n                0.03 -> 30m, 12.34 -> 12.34, 234.77 -> 234.8, 2345156.43 -> 23.45M'),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='unit_signed',
            field=models.BooleanField(default=False, help_text=b'For numeric and numeric_kv_list statistics only. If true, the data item is ALWAYS displayed with a sign (+ or -). If false only negative numbers are displayed with an explicit sign.'),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='unit_suffix',
            field=models.CharField(blank=True, help_text=b"A suffix for the statistic.  e.g. 'km': display 55 as '55km'.", max_length=40, null=True),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='unit_underfix',
            field=models.CharField(blank=True, help_text=b'A string to print under the statistic (as opposed to before or after).', max_length=40, null=True),
        ),
        migrations.AlterField(
            model_name='statistic',
            name='url',
            field=models.SlugField(verbose_name=b'A short symbolic name that identifies the statistic, used within the API'),
        ),
        migrations.AlterField(
            model_name='tiledefinition',
            name='aspect',
            field=models.IntegerField(default=1, help_text=b'Front-end implementation-specific indicator of relative tile size within the widget.'),
        ),
        migrations.AlterField(
            model_name='tiledefinition',
            name='columns',
            field=models.SmallIntegerField(blank=True, help_text=b'The number of columns to display a list (or lists) in. For single_list_stat, multi_list_stat, priority_list and urgency_list tiles.', null=True),
        ),
        migrations.AlterField(
            model_name='tiledefinition',
            name='expansion',
            field=models.BooleanField(default=False, help_text=b"Whether the tile displays by default, or only when the widget is 'expanded'."),
        ),
        migrations.AlterField(
            model_name='tiledefinition',
            name='geo_datasets',
            field=models.ManyToManyField(blank=True, help_text=b'For map tiles. The geodatasets to display on the map', to='widget_def.GeoDataset'),
        ),
        migrations.AlterField(
            model_name='tiledefinition',
            name='geo_window',
            field=models.ForeignKey(blank=True, help_text=b'For map tiles.  Describes the geospatial coordinates the map must cover.', null=True, on_delete=django.db.models.deletion.CASCADE, to='widget_def.GeoWindow'),
        ),
        migrations.AlterField(
            model_name='tiledefinition',
            name='list_label_width',
            field=models.SmallIntegerField(blank=True, help_text=b'Relative width of the name column for a list.  May apply for main_stat, priority_list and urgency_list tiles, depending on front-end implementation.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='tiledefinition',
            name='main_stat_count',
            field=models.SmallIntegerField(blank=True, help_text=b"For main_stat tiles. The number of Statistics that are 'main' statistics. The remainder are 'secondary'. The main statistics are the ones that are sorted first within the tile.", null=True),
        ),
        migrations.AlterField(
            model_name='tiledefinition',
            name='sort_order',
            field=models.IntegerField(help_text=b'How the tile is sorted within the widget. Note: The default (non-expansion) tile is always sorted first'),
        ),
        migrations.AlterField(
            model_name='tiledefinition',
            name='template',
            field=models.CharField(blank=True, help_text=b"The text teplate for text_template tiles.  Reference statistics with '%{statistic_label}", max_length=512, null=True),
        ),
        migrations.AlterField(
            model_name='tiledefinition',
            name='tile_type',
            field=models.SmallIntegerField(choices=[(20, b'main_stat'), (18, b'text_template'), (10, b'single_list_stat'), (15, b'multi_list_stat'), (3, b'priority_list'), (4, b'urgency_list'), (5, b'list_overflow'), (6, b'graph'), (13, b'graph_single_stat'), (7, b'map'), (9, b'grid'), (14, b'grid_single_stat'), (8, b'calendar'), (17, b'time_line'), (11, b'newsfeed'), (12, b'news_ticker'), (16, b'tag_cloud'), (19, b'text_block')], help_text=b'The type of tile'),
        ),
        migrations.AlterField(
            model_name='tiledefinition',
            name='url',
            field=models.SlugField(verbose_name=b'An identifier for the tile. Only appears in the API for graph tiles.'),
        ),
        migrations.AlterField(
            model_name='tiledefinition',
            name='widget',
            field=models.ForeignKey(help_text=b'The widget the tile is part of', on_delete=django.db.models.deletion.CASCADE, to='widget_def.WidgetDefinition'),
        ),
    ]
