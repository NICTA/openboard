# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-09-12 03:53
from __future__ import unicode_literals

import dashboard_api.validators
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('widget_def', '0070_auto_20160909_0925'),
    ]

    operations = [
        migrations.AlterField(
            model_name='geocolourpoint',
            name='colour',
            field=models.CharField(help_text=b'The colour. Stored as a 3 or 6 digit hex string', max_length=6, validators=[dashboard_api.validators.validate_html_colour]),
        ),
        migrations.AlterField(
            model_name='geocolourpoint',
            name='scale',
            field=models.ForeignKey(help_text=b'The colour scale', on_delete=django.db.models.deletion.CASCADE, to='widget_def.GeoColourScale'),
        ),
        migrations.AlterField(
            model_name='geocolourpoint',
            name='value',
            field=models.DecimalField(decimal_places=4, help_text=b'The value', max_digits=15),
        ),
        migrations.AlterField(
            model_name='geocolourscale',
            name='autoscale',
            field=models.BooleanField(default=True, help_text=b'If true colour table is auto-scaled from the defined colour point value range to the minimum and maximum values supplied at runtime.'),
        ),
        migrations.AlterField(
            model_name='geocolourscale',
            name='url',
            field=models.SlugField(help_text=b'Identifies the colour scale', unique=True),
        ),
        migrations.AlterField(
            model_name='geodataset',
            name='colour_map',
            field=models.ForeignKey(blank=True, help_text=b'A colour map to use for the dataset', null=True, on_delete=django.db.models.deletion.CASCADE, to='widget_def.GeoColourScale'),
        ),
        migrations.AlterField(
            model_name='geodataset',
            name='ext_url',
            field=models.URLField(blank=True, help_text=b'External URL - For External GeoDatasets only. May be parametised.', null=True),
        ),
        migrations.AlterField(
            model_name='geodataset',
            name='label',
            field=models.CharField(help_text=b'A user-displayable label for the dataset. May be parametised.', max_length=128, verbose_name=b'name'),
        ),
        migrations.AlterField(
            model_name='geodataset',
            name='sort_order',
            field=models.IntegerField(help_text=b"How the dataset should be sorted within it's sub-category"),
        ),
        migrations.AlterField(
            model_name='geodataset',
            name='url',
            field=models.SlugField(help_text=b'Identifies the GeoDataset in the API.', unique=True, verbose_name=b'label'),
        ),
        migrations.AlterField(
            model_name='geopropertydefinition',
            name='data_property',
            field=models.BooleanField(default=False, help_text=b'Only one dataset property can be flagged as a data property. It is the property whose value is used to colour-code the map display of the the GeoDataSet'),
        ),
        migrations.AlterField(
            model_name='geopropertydefinition',
            name='dataset',
            field=models.ForeignKey(help_text=b'The GeoDataset the property is defined for', on_delete=django.db.models.deletion.CASCADE, to='widget_def.GeoDataset'),
        ),
        migrations.AlterField(
            model_name='geopropertydefinition',
            name='label',
            field=models.CharField(help_text=b'A longer descriptive name for the property', max_length=256, verbose_name=b'name'),
        ),
        migrations.AlterField(
            model_name='geopropertydefinition',
            name='num_precision',
            field=models.SmallIntegerField(blank=True, help_text=b'The precision (number of decimal places) of a numeric property', null=True),
        ),
        migrations.AlterField(
            model_name='geopropertydefinition',
            name='predefined_geom_property',
            field=models.BooleanField(default=False, help_text=b'This property describes a pre-defined geometry, as specified in csv-geo-au. Can only be set for a Predefined GeoDataset, for which it must be the first property.'),
        ),
        migrations.AlterField(
            model_name='geopropertydefinition',
            name='property_type',
            field=models.SmallIntegerField(choices=[(1, b'string'), (2, b'numeric'), (3, b'date'), (4, b'time'), (5, b'datetime')], help_text=b'The datatype of the property.'),
        ),
        migrations.AlterField(
            model_name='geopropertydefinition',
            name='sort_order',
            field=models.IntegerField(help_text=b'Sort order of property within a GeoDataset'),
        ),
        migrations.AlterField(
            model_name='geopropertydefinition',
            name='url',
            field=models.SlugField(help_text=b'A short symbolic name for the property, as used by the API', verbose_name=b'label'),
        ),
        migrations.AlterField(
            model_name='geowindow',
            name='north_east',
            field=django.contrib.gis.db.models.fields.PointField(help_text=b'Coordinates of north-east corner of window', srid=4326),
        ),
        migrations.AlterField(
            model_name='geowindow',
            name='south_west',
            field=django.contrib.gis.db.models.fields.PointField(help_text=b'Coordinates of south-west corner of window', srid=4326),
        ),
        migrations.AlterField(
            model_name='geowindow',
            name='view_override',
            field=models.BooleanField(default=False, help_text=b'If true, prefer the geo-window defined by the current view (if it has a geo-window defined)'),
        ),
        migrations.AlterField(
            model_name='iconcode',
            name='description',
            field=models.CharField(help_text=b'A longer description of the icon', max_length=80),
        ),
        migrations.AlterField(
            model_name='iconcode',
            name='scale',
            field=models.ForeignKey(help_text=b'The IconLibrary this IconCode belongs to', on_delete=django.db.models.deletion.CASCADE, to='widget_def.IconLibrary', verbose_name=b'Library'),
        ),
        migrations.AlterField(
            model_name='iconcode',
            name='sort_order',
            field=models.IntegerField(help_text=b'icons are sorted within a library by this field'),
        ),
        migrations.AlterField(
            model_name='iconcode',
            name='value',
            field=models.SlugField(help_text=b'A short symbolic label for the icon, as used in the API'),
        ),
        migrations.AlterField(
            model_name='iconlibrary',
            name='name',
            field=models.SlugField(help_text=b'Name of the IconLibrary', unique=True),
        ),
        migrations.AlterField(
            model_name='trafficlightautomation',
            name='strategy',
            field=models.ForeignKey(help_text=b'The automation strategy', on_delete=django.db.models.deletion.CASCADE, to='widget_def.TrafficLightAutoStrategy'),
        ),
        migrations.AlterField(
            model_name='trafficlightautomation',
            name='target_statistic',
            field=models.ForeignKey(blank=True, help_text=b'The statistic being automated - should be either numeric or string statistic.', null=True, on_delete=django.db.models.deletion.CASCADE, to='widget_def.Statistic'),
        ),
        migrations.AlterField(
            model_name='trafficlightautomation',
            name='target_value',
            field=models.DecimalField(blank=True, decimal_places=4, help_text=b'The target value (for relative automation strategies)', max_digits=10, null=True),
        ),
        migrations.AlterField(
            model_name='trafficlightautomation',
            name='url',
            field=models.SlugField(help_text=b'Identifies the automation', unique=True),
        ),
        migrations.AlterField(
            model_name='trafficlightautorule',
            name='code',
            field=models.ForeignKey(help_text=b'The traffic light code to use if this rule applies.', on_delete=django.db.models.deletion.CASCADE, to='widget_def.TrafficLightScaleCode'),
        ),
        migrations.AlterField(
            model_name='trafficlightautorule',
            name='default_val',
            field=models.BooleanField(default=False, help_text=b'If true, then this is the default rule which applies if no other rule matches. There should be one and only one default value rule per automation strategy.'),
        ),
        migrations.AlterField(
            model_name='trafficlightautorule',
            name='map_val',
            field=models.CharField(blank=True, help_text=b'The string value for which this rule applies. Required for map strategies (unless default_val is set)', max_length=400, null=True),
        ),
        migrations.AlterField(
            model_name='trafficlightautorule',
            name='min_val',
            field=models.DecimalField(blank=True, decimal_places=4, help_text=b'The minimum value for which this rule applies. Required for absolute and relative strategies (unless default_val is set).', max_digits=10, null=True),
        ),
        migrations.AlterField(
            model_name='trafficlightautorule',
            name='strategy',
            field=models.ForeignKey(help_text=b'The automation strategy this rule is a part of', on_delete=django.db.models.deletion.CASCADE, to='widget_def.TrafficLightAutoStrategy'),
        ),
        migrations.AlterField(
            model_name='trafficlightautostrategy',
            name='scale',
            field=models.ForeignKey(help_text=b'The TrafficLightScale this strategy automates', on_delete=django.db.models.deletion.CASCADE, to='widget_def.TrafficLightScale'),
        ),
        migrations.AlterField(
            model_name='trafficlightautostrategy',
            name='strategy_type',
            field=models.SmallIntegerField(choices=[(1, b'relative'), (2, b'absolute'), (3, b'map')], help_text=b'The type of automation strategy. Supported strategy types are:\n\n            RELATIVE: Traffic light code is determined from the ratio of a numeric statistic value to a defined target value.\n\n            ABSOLUTE: Traffic light code is determined directly from a numeric statistic value.\n\n            MAP: Traffic light code is mapped from a string statistic value.\n            '),
        ),
        migrations.AlterField(
            model_name='trafficlightautostrategy',
            name='url',
            field=models.SlugField(help_text=b'Identifies the automation strategy', unique=True),
        ),
        migrations.AlterField(
            model_name='trafficlightscale',
            name='name',
            field=models.CharField(help_text=b'Identifies the traffic light scale', max_length=80, unique=True),
        ),
        migrations.AlterField(
            model_name='trafficlightscalecode',
            name='colour',
            field=models.CharField(help_text=b'A description of the actual colour.  May exactl specify the colour (e.g. a hex code) but in general the exact colour scheme should be left to the front end implementation', max_length=50),
        ),
        migrations.AlterField(
            model_name='trafficlightscalecode',
            name='scale',
            field=models.ForeignKey(help_text=b'The traffic light scale', on_delete=django.db.models.deletion.CASCADE, to='widget_def.TrafficLightScale'),
        ),
        migrations.AlterField(
            model_name='trafficlightscalecode',
            name='value',
            field=models.SlugField(help_text=b'A short symbolic representation of the intensity/severity this code represents, as used in the API'),
        ),
        migrations.AlterField(
            model_name='viewgeodatasetdeclaration',
            name='dataset',
            field=models.ForeignKey(help_text=b'The GeoDataset to include in the WidgetView', on_delete=django.db.models.deletion.CASCADE, to='widget_def.GeoDataset'),
        ),
        migrations.AlterField(
            model_name='viewgeodatasetdeclaration',
            name='view',
            field=models.ForeignKey(help_text=b'The WidgetView the GeoDataset is to be included in', on_delete=django.db.models.deletion.CASCADE, to='widget_def.WidgetView'),
        ),
        migrations.AlterField(
            model_name='widgetdefinition',
            name='about',
            field=models.TextField(blank=True, help_text=b'Arbitrary html block describing the widget. May be parametised.', null=True),
        ),
        migrations.AlterField(
            model_name='widgetdefinition',
            name='deexpansion_hint',
            field=models.CharField(blank=True, help_text=b'The text hint on the control to close expansion tiles. Required for widgets with expansion tiles.', max_length=80, null=True),
        ),
        migrations.AlterField(
            model_name='widgetdefinition',
            name='default_frequency_text',
            field=models.CharField(help_text=b'The default text indicating update frequency or time of last update.  Rarely seen - usually overridden at dataload time.', max_length=60),
        ),
        migrations.AlterField(
            model_name='widgetdefinition',
            name='expansion_hint',
            field=models.CharField(blank=True, help_text=b'The text hint on the control to open expansion tiles. Required for widgets with expansion tiles.', max_length=80, null=True),
        ),
        migrations.AlterField(
            model_name='widgetdefinition',
            name='family',
            field=models.ForeignKey(help_text=b'The widget family', on_delete=django.db.models.deletion.CASCADE, to='widget_def.WidgetFamily'),
        ),
        migrations.AlterField(
            model_name='widgetdefinition',
            name='label',
            field=models.CharField(help_text=b'Used in admin interfaces to distinguish between widgets within a family. Not exposed in the API.', max_length=128),
        ),
        migrations.AlterField(
            model_name='widgetdefinition',
            name='parametisation',
            field=models.ForeignKey(blank=True, help_text=b"The Parametisation. Note that a Parametisation can only be set on a widget definition that is the only widget definition for it's widget family", null=True, on_delete=django.db.models.deletion.CASCADE, to='widget_def.Parametisation'),
        ),
        migrations.AlterField(
            model_name='widgetdefinition',
            name='refresh_rate',
            field=models.IntegerField(help_text=b'How often (in seconds) the client should poll Openboard for new data.'),
        ),
        migrations.AlterField(
            model_name='widgetdefinition',
            name='sort_order',
            field=models.IntegerField(help_text=b'How the widget is sorted in admin backend', unique=True),
        ),
        migrations.AlterField(
            model_name='widgetfamily',
            name='name',
            field=models.CharField(help_text=b'The name (main heading) of widgets in this family. May be parametised.', max_length=80),
        ),
        migrations.AlterField(
            model_name='widgetfamily',
            name='source_url',
            field=models.URLField(help_text=b"An external URL that the user can be directed to for more information.  Typically the canonical source for the widget's data. May be parametised.", max_length=400),
        ),
        migrations.AlterField(
            model_name='widgetfamily',
            name='source_url_text',
            field=models.CharField(help_text=b'The text for the source_url link. May be parametised.', max_length=60),
        ),
        migrations.AlterField(
            model_name='widgetfamily',
            name='subcategory',
            field=models.ForeignKey(help_text=b'The subcategory (and therefore category) of the widget family', on_delete=django.db.models.deletion.CASCADE, to='widget_def.Subcategory'),
        ),
        migrations.AlterField(
            model_name='widgetfamily',
            name='subtitle',
            field=models.CharField(blank=True, help_text=b'The option subheading of widgets in this family. May be parametised.', max_length=120, null=True),
        ),
        migrations.AlterField(
            model_name='widgetfamily',
            name='url',
            field=models.SlugField(help_text=b'A short symbolic name used to refer to widgets in this family in the API. May be parametised.', unique=True),
        ),
    ]
